package serial

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CommandMsgPack) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "n":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "a":
			z.Arg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Arg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CommandMsgPack) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "t"
	err = en.Append(0x83, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.T)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Arg)
	if err != nil {
		err = msgp.WrapError(err, "Arg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CommandMsgPack) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "t"
	o = append(o, 0x83, 0xa1, 0x74)
	o = msgp.AppendInt(o, z.T)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.Name)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendString(o, z.Arg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CommandMsgPack) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "n":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "a":
			z.Arg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Arg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CommandMsgPack) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + msgp.StringPrefixSize + len(z.Arg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventMsgPack) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "n":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EventMsgPack) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.T)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EventMsgPack) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "t"
	o = append(o, 0x82, 0xa1, 0x74)
	o = msgp.AppendInt(o, z.T)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventMsgPack) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "n":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EventMsgPack) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetricsMsgPack) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "ms":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Ms")
				return
			}
			if cap(z.Ms) >= int(zb0002) {
				z.Ms = (z.Ms)[:zb0002]
			} else {
				z.Ms = make([]map[string]float32, zb0002)
			}
			for za0001 := range z.Ms {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Ms", za0001)
					return
				}
				if z.Ms[za0001] == nil {
					z.Ms[za0001] = make(map[string]float32, zb0003)
				} else if len(z.Ms[za0001]) > 0 {
					for key := range z.Ms[za0001] {
						delete(z.Ms[za0001], key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0002 string
					var za0003 float32
					za0002, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Ms", za0001)
						return
					}
					za0003, err = dc.ReadFloat32()
					if err != nil {
						err = msgp.WrapError(err, "Ms", za0001, za0002)
						return
					}
					z.Ms[za0001][za0002] = za0003
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetricsMsgPack) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.T)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	// write "ms"
	err = en.Append(0xa2, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Ms)))
	if err != nil {
		err = msgp.WrapError(err, "Ms")
		return
	}
	for za0001 := range z.Ms {
		err = en.WriteMapHeader(uint32(len(z.Ms[za0001])))
		if err != nil {
			err = msgp.WrapError(err, "Ms", za0001)
			return
		}
		for za0002, za0003 := range z.Ms[za0001] {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "Ms", za0001)
				return
			}
			err = en.WriteFloat32(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Ms", za0001, za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetricsMsgPack) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "t"
	o = append(o, 0x82, 0xa1, 0x74)
	o = msgp.AppendInt(o, z.T)
	// string "ms"
	o = append(o, 0xa2, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Ms)))
	for za0001 := range z.Ms {
		o = msgp.AppendMapHeader(o, uint32(len(z.Ms[za0001])))
		for za0002, za0003 := range z.Ms[za0001] {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendFloat32(o, za0003)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetricsMsgPack) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "ms":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ms")
				return
			}
			if cap(z.Ms) >= int(zb0002) {
				z.Ms = (z.Ms)[:zb0002]
			} else {
				z.Ms = make([]map[string]float32, zb0002)
			}
			for za0001 := range z.Ms {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Ms", za0001)
					return
				}
				if z.Ms[za0001] == nil {
					z.Ms[za0001] = make(map[string]float32, zb0003)
				} else if len(z.Ms[za0001]) > 0 {
					for key := range z.Ms[za0001] {
						delete(z.Ms[za0001], key)
					}
				}
				for zb0003 > 0 {
					var za0002 string
					var za0003 float32
					zb0003--
					za0002, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Ms", za0001)
						return
					}
					za0003, bts, err = msgp.ReadFloat32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Ms", za0001, za0002)
						return
					}
					z.Ms[za0001][za0002] = za0003
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetricsMsgPack) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.Ms {
		s += msgp.MapHeaderSize
		if z.Ms[za0001] != nil {
			for za0002, za0003 := range z.Ms[za0001] {
				_ = za0003
				s += msgp.StringPrefixSize + len(za0002) + msgp.Float32Size
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ParameterMsgPack) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "ps":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Ps")
				return
			}
			if cap(z.Ps) >= int(zb0002) {
				z.Ps = (z.Ps)[:zb0002]
			} else {
				z.Ps = make([]map[string]float32, zb0002)
			}
			for za0001 := range z.Ps {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Ps", za0001)
					return
				}
				if z.Ps[za0001] == nil {
					z.Ps[za0001] = make(map[string]float32, zb0003)
				} else if len(z.Ps[za0001]) > 0 {
					for key := range z.Ps[za0001] {
						delete(z.Ps[za0001], key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0002 string
					var za0003 float32
					za0002, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Ps", za0001)
						return
					}
					za0003, err = dc.ReadFloat32()
					if err != nil {
						err = msgp.WrapError(err, "Ps", za0001, za0002)
						return
					}
					z.Ps[za0001][za0002] = za0003
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ParameterMsgPack) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "t"
	err = en.Append(0x82, 0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.T)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	// write "ps"
	err = en.Append(0xa2, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Ps)))
	if err != nil {
		err = msgp.WrapError(err, "Ps")
		return
	}
	for za0001 := range z.Ps {
		err = en.WriteMapHeader(uint32(len(z.Ps[za0001])))
		if err != nil {
			err = msgp.WrapError(err, "Ps", za0001)
			return
		}
		for za0002, za0003 := range z.Ps[za0001] {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "Ps", za0001)
				return
			}
			err = en.WriteFloat32(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Ps", za0001, za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ParameterMsgPack) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "t"
	o = append(o, 0x82, 0xa1, 0x74)
	o = msgp.AppendInt(o, z.T)
	// string "ps"
	o = append(o, 0xa2, 0x70, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Ps)))
	for za0001 := range z.Ps {
		o = msgp.AppendMapHeader(o, uint32(len(z.Ps[za0001])))
		for za0002, za0003 := range z.Ps[za0001] {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendFloat32(o, za0003)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ParameterMsgPack) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "t":
			z.T, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "ps":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ps")
				return
			}
			if cap(z.Ps) >= int(zb0002) {
				z.Ps = (z.Ps)[:zb0002]
			} else {
				z.Ps = make([]map[string]float32, zb0002)
			}
			for za0001 := range z.Ps {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Ps", za0001)
					return
				}
				if z.Ps[za0001] == nil {
					z.Ps[za0001] = make(map[string]float32, zb0003)
				} else if len(z.Ps[za0001]) > 0 {
					for key := range z.Ps[za0001] {
						delete(z.Ps[za0001], key)
					}
				}
				for zb0003 > 0 {
					var za0002 string
					var za0003 float32
					zb0003--
					za0002, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Ps", za0001)
						return
					}
					za0003, bts, err = msgp.ReadFloat32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Ps", za0001, za0002)
						return
					}
					z.Ps[za0001][za0002] = za0003
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ParameterMsgPack) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.Ps {
		s += msgp.MapHeaderSize
		if z.Ps[za0001] != nil {
			for za0002, za0003 := range z.Ps[za0001] {
				_ = za0003
				s += msgp.StringPrefixSize + len(za0002) + msgp.Float32Size
			}
		}
	}
	return
}
